{"version":3,"sources":["reportWebVitals.ts","img/20211012212929.png","brige/search-form.tsx","brige/transfer-list.tsx","brige/index.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","SearchForm","computers","param","setParam","value","addr","onChange","event","target","map","computer","TransferList","list","console","log","e","index","source","port","Bridge","useState","setSource","setTarget","listChange","setListChange","list1","setList1","list2","setList2","message1","setMessage1","message2","setMessage2","computerList","netDict","style","textAlign","onSubmit","preventDefault","currentTarget","elements","listChangeNew","way","singleNetDict","key","obj","key1","findIndex","push","index2","type","onClick","includes","copy","splice","length","flex","alignItems","justifyContent","src","netImg","alt","width","height","float","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0d3f137.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","export default __webpack_public_path__ + \"static/media/20211012212929.6005c311.png\";","import React from \"react\";\r\n\r\n\r\ninterface ComputerProps {\r\n  addr: string;\r\n}\r\n\r\ninterface SearchFormProps {\r\n  computers: ComputerProps[];\r\n  param: ComputerProps;\r\n  setParam: (param: ComputerProps) => void;\r\n\r\n}\r\n\r\nexport const SearchForm = ({ computers, param, setParam }: SearchFormProps) => {\r\n  return (\r\n    // <form>\r\n        <select value={param.addr} onChange={event => setParam({\r\n          ...param,\r\n          addr: event.target.value,\r\n        })}>\r\n\r\n          {\r\n            computers.map(computer => <option key={computer.addr} value={computer.addr}>{computer.addr}</option>)\r\n          }\r\n\r\n        </select>\r\n    // </form>\r\n  );\r\n};","import React from \"react\";\r\n\r\nexport interface ListElement {\r\n  source: string;\r\n  port: number;\r\n}\r\n\r\ninterface ListProps {\r\n  list: ListElement[];\r\n}\r\n\r\n\r\nexport const TransferList = ({list} : ListProps) => {\r\n\r\n  console.log(list);\r\n  return <table>\r\n    <thead>\r\n    <tr>\r\n      <th>地址</th>\r\n      <th>端口</th>\r\n    </tr>\r\n    </thead>\r\n    <tbody>\r\n    {\r\n      list.map((e, index) => <tr key={index}>\r\n        <td>{e.source}</td>\r\n        <td>{e.port}</td>\r\n      </tr>)\r\n    }\r\n    </tbody>\r\n  </table>;\r\n\r\n};","import React, { FormEvent, useState } from \"react\";\r\nimport netImg from \"../img/20211012212929.png\";\r\nimport { SearchForm } from \"./search-form\";\r\nimport { ListElement, TransferList } from \"./transfer-list\";\r\n\r\nexport const Bridge = () => {\r\n\r\n  const [source, setSource] = useState({\r\n    addr: \"\",\r\n  });\r\n\r\n\r\n  const [target, setTarget] = useState({\r\n    addr: \"\",\r\n  });\r\n\r\n\r\n  const [listChange, setListChange] = useState([] as string[]);\r\n\r\n  const [list1, setList1] = useState([] as ListElement[]);\r\n\r\n  const [list2, setList2] = useState([] as ListElement[]);\r\n\r\n  const [message1, setMessage1] = useState(\"\");\r\n  const [message2, setMessage2] = useState(\"\");\r\n\r\n\r\n  const computerList = [\r\n    {\r\n      addr: \"H1\",\r\n    },\r\n    {\r\n      addr: \"H2\",\r\n    },\r\n    {\r\n      addr: \"H3\",\r\n    },\r\n    {\r\n      addr: \"H4\",\r\n    },\r\n    {\r\n      addr: \"H5\",\r\n    },\r\n    {\r\n      addr: \"H6\",\r\n    },\r\n  ];\r\n\r\n  const netDict: { [key: string]: { [key: string]: { [key1: string]: number }; } } = {\r\n    \"H1\": { \"left\": {}, \"right\": { \"B1\": 1, \"B2\": 1 } },\r\n    \"H2\": { \"left\": {}, \"right\": { \"B1\": 1, \"B2\": 1 } },\r\n    \"H3\": { \"left\": { \"B1\": 2 }, \"right\": { \"B2\": 1 } },\r\n    \"H4\": { \"left\": { \"B1\": 2 }, \"right\": { \"B2\": 1 } },\r\n    \"H5\": { \"left\": { \"B2\": 2, \"B1\": 2 }, \"right\": {} },\r\n    \"H6\": { \"left\": { \"B2\": 2, \"B1\": 2 }, \"right\": {} },\r\n  };\r\n\r\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    setMessage1(\"\");\r\n    setMessage2(\"\");\r\n    const source = (event.currentTarget.elements[0] as HTMLFormElement).value;\r\n    const target = (event.currentTarget.elements[1] as HTMLFormElement).value;\r\n    console.log(source);\r\n\r\n    const listChangeNew = [];\r\n    for (const way in netDict) {\r\n      if (way == source) {\r\n        const singleNetDict = netDict[way];\r\n        for (const key in singleNetDict) {\r\n          const obj = singleNetDict[key];\r\n          for (const key1 in obj) {\r\n            if (key1 === \"B1\") {\r\n              const index1 = list1.findIndex((value => value.source == source));\r\n              if (index1 == -1) {\r\n                setList1([...list1, {\r\n                  source: source,\r\n                  port: obj[key1],\r\n                }]);\r\n                listChangeNew.push(\"B1\");\r\n              }\r\n\r\n              const index2 = list1.findIndex((value => value.source == target));\r\n              if (index2 != -1 && list1[index2].port === obj[key1]) {\r\n                setMessage1(\"B1丢弃该帧\");\r\n                break;\r\n              } else {\r\n                setMessage1(\"B1转发该帧\");\r\n\r\n\r\n              }\r\n            } else if (key1 === \"B2\") {\r\n              const index1 = list2.findIndex((value => value.source == source));\r\n              if (index1 == -1) {\r\n                setList2([...list2, {\r\n                  source: source,\r\n                  port: obj[key1],\r\n                }]);\r\n                listChangeNew.push(\"B2\");\r\n              }\r\n\r\n              const index2 = list2.findIndex((value => value.source == target));\r\n              if (index2 != -1 && list2[index2].port == obj[key1]) {\r\n                setMessage2(\"B2丢弃该帧\");\r\n                break;\r\n              } else {\r\n                setMessage2(\"B2转发该帧\");\r\n              }\r\n            }\r\n\r\n\r\n          }\r\n\r\n\r\n        }\r\n      }\r\n\r\n\r\n    }\r\n    setListChange(listChangeNew);\r\n  };\r\n\r\n  const rollBack = () => {\r\n    const param = listChange;\r\n    console.log(param);\r\n    if (param.includes(\"B1\")) {\r\n      const copy = [...list1];\r\n      copy.splice(list1.length - 1, 1);\r\n      setList1(copy);\r\n    }\r\n    if (param.includes(\"B2\")) {\r\n      const copy = [...list2];\r\n      copy.splice(list2.length - 1, 1);\r\n      setList2(copy);\r\n    }\r\n    setListChange([]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <form style={{ textAlign: \"center\" }} onSubmit={handleSubmit}>\r\n          <span>源地址：</span>\r\n          <SearchForm computers={computerList} param={source} setParam={setSource}/>\r\n          <span>目标地址：</span>\r\n          <SearchForm computers={computerList} param={target} setParam={setTarget}/>\r\n          <button type={\"submit\"}>开始</button>\r\n        </form>\r\n        <div style={{ textAlign: \"center\" }}>\r\n          <button onClick={rollBack}>后退</button>\r\n        </div>\r\n\r\n      </div>\r\n\r\n      <div style={{ flex: 1, alignItems: \"center\", justifyContent: \"center\" }}>\r\n        <img style={{ textAlign: \"center\" }} src={netImg} alt={\"\"}/>\r\n      </div>\r\n\r\n      <p>{message1}</p><p>{message2}</p>\r\n      <div style={{ width: \"50%\", height: \"100%\", float: \"left\" }}>\r\n        <span>B1转发表</span>\r\n        <TransferList list={list1}/>\r\n      </div>\r\n      <div style={{ width: \"50%\", height: \"100%\", float: \"left\" }}>\r\n        <span>B2转发表</span>\r\n        <TransferList list={list2}/>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Bridge } from \"./brige\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/*<App />*/}\r\n    <Bridge/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}